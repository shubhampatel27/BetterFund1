{"ast":null,"code":"import fetch from \"node-fetch\";\nexport const getETHPrice = async () => {\n  try {\n    const response = await fetch(\"https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=ethereum\");\n    const data = await response.json();\n    const ethPrice = data[0].current_price;\n    return parseFloat(parseFloat(ethPrice).toFixed(2));\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getWEIPriceInUSD = (usd, wei) => {\n  return parseFloat(convertWeiToETH(wei) * usd).toFixed(2);\n};\nexport const getETHPriceInUSD = (usd, eth) => {\n  return parseFloat(eth * usd).toFixed(2);\n};\nexport const convertWeiToETH = wei => {\n  return parseFloat(wei) / 1000000000000000000;\n};","map":{"version":3,"sources":["/Users/shubhampatel/Desktop/GloryFund1/lib/getETHPrice.js"],"names":["fetch","getETHPrice","response","data","json","ethPrice","current_price","parseFloat","toFixed","error","console","log","getWEIPriceInUSD","usd","wei","convertWeiToETH","getETHPriceInUSD","eth"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,YAAlB;AACA,OAAO,MAAMC,WAAW,GAAG,YAAY;AACrC,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMF,KAAK,CAC1B,6EAD0B,CAA5B;AAGA,UAAMG,IAAI,GAAG,MAAMD,QAAQ,CAACE,IAAT,EAAnB;AACA,UAAMC,QAAQ,GAAGF,IAAI,CAAC,CAAD,CAAJ,CAAQG,aAAzB;AACA,WAAOC,UAAU,CAACA,UAAU,CAACF,QAAD,CAAV,CAAqBG,OAArB,CAA6B,CAA7B,CAAD,CAAjB;AACD,GAPD,CAOE,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CAXM;AAaP,OAAO,MAAMG,gBAAgB,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC5C,SAAOP,UAAU,CAACQ,eAAe,CAACD,GAAD,CAAf,GAAuBD,GAAxB,CAAV,CAAuCL,OAAvC,CAA+C,CAA/C,CAAP;AACD,CAFM;AAGP,OAAO,MAAMQ,gBAAgB,GAAG,CAACH,GAAD,EAAMI,GAAN,KAAc;AAC5C,SAAOV,UAAU,CAACU,GAAG,GAAGJ,GAAP,CAAV,CAAsBL,OAAtB,CAA8B,CAA9B,CAAP;AACD,CAFM;AAIP,OAAO,MAAMO,eAAe,GAAID,GAAD,IAAS;AACtC,SAAOP,UAAU,CAACO,GAAD,CAAV,GAAkB,mBAAzB;AACD,CAFM","sourcesContent":["import fetch from \"node-fetch\";\nexport const getETHPrice = async () => {\n  try {\n    const response = await fetch(\n      \"https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=ethereum\"\n    );\n    const data = await response.json();\n    const ethPrice = data[0].current_price;\n    return parseFloat(parseFloat(ethPrice).toFixed(2));\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getWEIPriceInUSD = (usd, wei) => {\n  return parseFloat(convertWeiToETH(wei) * usd).toFixed(2);\n};\nexport const getETHPriceInUSD = (usd, eth) => {\n  return parseFloat(eth * usd).toFixed(2);\n};\n\nexport const convertWeiToETH = (wei) => {\n  return parseFloat(wei) / 1000000000000000000;\n};\n"]},"metadata":{},"sourceType":"module"}