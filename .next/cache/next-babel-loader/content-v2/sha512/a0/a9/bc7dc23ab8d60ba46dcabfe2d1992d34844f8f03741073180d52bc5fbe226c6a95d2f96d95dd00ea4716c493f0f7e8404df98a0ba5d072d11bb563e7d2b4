{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shubhampatel/Desktop/GloryFund1/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/shubhampatel/Desktop/GloryFund1/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport fetch from \"node-fetch\";\nexport var getETHPrice = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var response, data, ethPrice;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return fetch(\"https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=ethereum\");\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return response.json();\n\n          case 6:\n            data = _context.sent;\n            ethPrice = data[0].current_price;\n            return _context.abrupt(\"return\", parseFloat(parseFloat(ethPrice).toFixed(2)));\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 11]]);\n  }));\n\n  return function getETHPrice() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getWEIPriceInUSD = function getWEIPriceInUSD(usd, wei) {\n  return parseFloat(convertWeiToETH(wei) * usd).toFixed(2);\n};\nexport var getETHPriceInUSD = function getETHPriceInUSD(usd, eth) {\n  return parseFloat(eth * usd).toFixed(2);\n};\nexport var convertWeiToETH = function convertWeiToETH(wei) {\n  return parseFloat(wei) / 1000000000000000000;\n};","map":{"version":3,"sources":["/Users/shubhampatel/Desktop/GloryFund1/lib/getETHPrice.js"],"names":["fetch","getETHPrice","response","json","data","ethPrice","current_price","parseFloat","toFixed","console","log","getWEIPriceInUSD","usd","wei","convertWeiToETH","getETHPriceInUSD","eth"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,YAAlB;AACA,OAAO,IAAMC,WAAW;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEAD,KAAK,CAC1B,6EAD0B,CAFL;;AAAA;AAEjBE,YAAAA,QAFiB;AAAA;AAAA,mBAKJA,QAAQ,CAACC,IAAT,EALI;;AAAA;AAKjBC,YAAAA,IALiB;AAMjBC,YAAAA,QANiB,GAMND,IAAI,CAAC,CAAD,CAAJ,CAAQE,aANF;AAAA,6CAOhBC,UAAU,CAACA,UAAU,CAACF,QAAD,CAAV,CAAqBG,OAArB,CAA6B,CAA7B,CAAD,CAPM;;AAAA;AAAA;AAAA;AASvBC,YAAAA,OAAO,CAACC,GAAR;;AATuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXT,WAAW;AAAA;AAAA;AAAA,GAAjB;AAaP,OAAO,IAAMU,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,GAAD,EAAMC,GAAN,EAAc;AAC5C,SAAON,UAAU,CAACO,eAAe,CAACD,GAAD,CAAf,GAAuBD,GAAxB,CAAV,CAAuCJ,OAAvC,CAA+C,CAA/C,CAAP;AACD,CAFM;AAGP,OAAO,IAAMO,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACH,GAAD,EAAMI,GAAN,EAAc;AAC5C,SAAOT,UAAU,CAACS,GAAG,GAAGJ,GAAP,CAAV,CAAsBJ,OAAtB,CAA8B,CAA9B,CAAP;AACD,CAFM;AAIP,OAAO,IAAMM,eAAe,GAAG,SAAlBA,eAAkB,CAACD,GAAD,EAAS;AACtC,SAAON,UAAU,CAACM,GAAD,CAAV,GAAkB,mBAAzB;AACD,CAFM","sourcesContent":["import fetch from \"node-fetch\";\nexport const getETHPrice = async () => {\n  try {\n    const response = await fetch(\n      \"https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&ids=ethereum\"\n    );\n    const data = await response.json();\n    const ethPrice = data[0].current_price;\n    return parseFloat(parseFloat(ethPrice).toFixed(2));\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getWEIPriceInUSD = (usd, wei) => {\n  return parseFloat(convertWeiToETH(wei) * usd).toFixed(2);\n};\nexport const getETHPriceInUSD = (usd, eth) => {\n  return parseFloat(eth * usd).toFixed(2);\n};\n\nexport const convertWeiToETH = (wei) => {\n  return parseFloat(wei) / 1000000000000000000;\n};\n"]},"metadata":{},"sourceType":"module"}